name: CI/CD Pipeline

on:
  push:
    branches:
      - 'master'
      - 'develop'
      - 'feature/EPIC-*'
      - 'feature/US-*'
    paths:
      - 'src/**'
      - '.github/workflows/maven.yml'
      - 'docker-compose.yml'
      - 'Dockerfile'
  pull_request:
    branches:
      - 'master'
      - 'develop'
    paths:
      - 'src/**'
      - '.github/workflows/maven.yml'
      - 'docker-compose.yml'
      - 'Dockerfile'

jobs:
  validate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/feature/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Maven dependencies caching
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Maven install (without running tests)
        run: mvn install -DskipTests

      - name: Run unit tests
        run: mvn test

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Maven dependencies caching
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Maven install (without running tests)
        run: mvn install -DskipTests

      - name: Build Docker image
        run: docker build -t citronix-api:latest .

      - name: Run Docker Compose
        run: docker compose up --build -d
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/citronix
          SPRING_DATASOURCE_USERNAME: soufiane
          SPRING_DATASOURCE_PASSWORD: 1234

      - name: Wait for PostgreSQL readiness
        run: |
          timeout 30s bash -c 'until pg_isready -h postgres -p 5432; do sleep 1; done'

      - name: Run integration tests
        run: mvn verify
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/citronix
          SPRING_DATASOURCE_USERNAME: soufiane
          SPRING_DATASOURCE_PASSWORD: 1234

      - name: Shut down Docker Compose
        run: docker compose down

      - name: Set Docker tag based on branch
        id: set-tag
        run: |
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=staging" >> $GITHUB_OUTPUT
          fi

      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: bouanani/citronix-api
          tags: ${{ steps.set-tag.outputs.tag }}
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
